#!/bin/bash

HOMEDIR=/srv/home
SKELDIR=/srv/etc/skel

DATA=~guest/apply/data
LOG=~/log/decide

CONTACTS=/srv/etc/contact.json
CONTACT=/srv/bin/contact

TOTAL=`grep -v ^$ $DATA | wc -l | cut -d' ' -f1`
NEXT=""
SEEN=""

HR="---------------------------------------------------------------"  
FF=
XX=

touch "$LOG"

EMAIL_TEMPLATE=`cat <<\EOF
Subject:

<pre>
</pre>

EOF`

ACCEPT_TEMPLATE=`cat <<\EOF
Subject: Welcome to the Hacker Union!

<pre>
Congratulations! Your Hacker Union membership has been approved.

Username: \$USERLOGIN
Password: \$USERPASS

----------
NEXT STEPS
==========

1. <a href="http://h9n.org/#/home/guest/docs/ssh_info.cgi">Set up SSH access and change your password</a>
2. <a href="http://h9n.org/#/home/guest/docs/the_guide.md">Skim The Guide</a>
3. <a href="http://h9n.org">Explore the server and create a home page</a>

---------
IMPORTANT
=========

You are currently a recruit.

To become a full member (and receive a membership card), you must either:

 I.    Come to 3+ events
 II.   Commit code to the Hacker Union server
 III.  Host a Hack Night
 IV.   Launch a project on the server

If you have any questions, don't hestiate to get in touch!

Happy Hacking,
root
</pre>
EOF`

REJECT_TEMPLATE=`cat <<\EOF
Subject: RE: Hacker Union Application

<pre>
Thank you for applying to the Hacker Union.

Before moving forward, we'd like you to join us for an event:

<a href="http://h9n.org/var/www/events/">http://h9n.org/var/www/events/</a>

Let the host know that you're interested in membership, and they'll point you in the right direction.

Happy Hacking,
root
</pre>
EOF`

if (( $UID != 0 )); then
    echo "This script must be run as root (try sudo -E $0)"
    exit 1
fi

hr_title() {
    for ((s=0; s<${#HR} / 2 - ${#1} / 2; s++)); do
        echo -n " "
    done
    echo -n "$1"
}

eval_template() {
    local TMP=`mktemp /tmp/$$XXXXX`
    echo -e "$@" > $TMP
    echo -e "$(eval "echo -e \"$(cat $TMP)\"")"
    rm $TMP
}

compose_email_or_retry() {
    local TMP=`mktemp /tmp/$$XXXXX`
    local OLD=`mktemp /tmp/$$XXXXX`

    echo -e "`eval_template "$2"`" | tee $OLD > $TMP
    ${EDITOR:-nano} "$TMP"
    
    if [[ "$3" == "force" ]]; then
        # force diff to fail
        echo > $OLD
    fi

    if ! diff -q $TMP $OLD > /dev/null &> /dev/null; then
        if $CONTACT email $1 < $TMP; then
            rm $TMP $OLD
            echo "Email sent!"
            return 0
        fi
    fi

    rm $TMP $OLD
    echo "Couldn't send email..."
    continue
}

confirm_or_retry() {
        read -n 1 -p "[36mAre you sure? (y/N)[0m " CONFIRM
        echo
        echo
        if echo "$CONFIRM" | grep -qvi '^y'; then
            continue
        fi
}

get_password_and_crypt() {
    local PASS=`openssl rand -base64 8 | tr -cd '[:alpha:]'`
    local HASH=`echo $PASS | openssl passwd -1 -stdin`

    echo "$PASS $HASH"
}

create_user_or_retry() {
    useradd --create-home \
            --home-dir          "$HOMEDIR/$1" \
            --skel              "$SKELDIR" \
            --password          "$2" \
            --groups            "member" \
            $1
    
    if (( $? )); then
        echo "User creation failed!"
        continue
    fi

    chown -R "$1:$1" "$HOMEDIR/$1"
    chmod -R u+rw,g+r,o+r "$HOMEDIR/$1" 
    
    add_email_to_contacts "$1" "$4"

    echo "User created!"
}

add_email_to_contacts() {
    local TMP=`mktemp /tmp/$$XXXXX`
    jq "[] |= . + [{\"username\": \"$1\", \"preferred\": \"email\", \"email\": [\"$2\"]}]" $CONTACTS > $TMP
    cat < $TMP > $CONTACTS
    rm $TMP
}

exec 3< "$DATA"
echo
i=0

while read -u 3 LINE; do
    echo "$LINE" | grep -q '^$'&& continue
    V=`echo $LINE | cut -d\| -f1`
    let i=i+1
    if [[ "$V" != "1" ]]; then
        echo "Unsupported version ($V), skipping..."
        continue
    fi
    
    SECRETS=`get_password_and_crypt`
    USERPASS=`echo $SECRETS | cut -d' ' -f1`
    USERHASH=`echo $SECRETS | cut -d' ' -f2`
    
    IP=`echo $LINE | cut -d\| -f2`
    FULLNAME=`echo $LINE | cut -d\| -f3`
    EMAIL=`echo $LINE | cut -d\| -f4`
    USERLOGIN=`echo $LINE | cut -d\| -f5 | tr 'A-Z' 'a-z'`
    TIMESTAMP=`echo $LINE | cut -d\| -f6`
    COMMENT=`echo $LINE | cut -d\| -f7`

    test -z "$FF" && cat <<EOF
[32m$HR
`hr_title "$i of $TOTAL"`
$HR

    [0m[41mApplicant:[0m    $FULLNAME ($USERLOGIN)
    [41mEmail:[0m        $EMAIL
    [41mDate:[0m         $TIMESTAMP
    [41mComment:[0m

    ${COMMENT:-(None)}
    [32m
$HR

EOF
    
    while true; do
        if test -z "$FF"; then
            if echo "$SEEN" | grep -q "$IP"; then
              echo "[36mDuplicate entry from $IP. Assuming deletion."
              ACTION='d'
              SEEN=`echo "$SEEN" | sed -e "s/$IP//"`
            else
              ACTION=
            fi
            
            if test -z "$ACTION"; then
              read -n 1 -p "[0m$USERLOGIN> [35m(a)ccept, (r)eject, (d)elete, (e)mail, (u)sername, (s)kip, (q)uit?[0m " ACTION
              echo
            fi
        else
            ACTION='s'
        fi

        case "$ACTION" in
            a|A)
                confirm_or_retry
                compose_email_or_retry $EMAIL "$ACCEPT_TEMPLATE" force
                create_user_or_retry "$USERLOGIN" "$USERHASH" "$FULLNAME" "$EMAIL"
                XX=true
                echo "a|`date`|$LINE" >> $LOG
                ;;
            
            r|R)
                confirm_or_retry
                compose_email_or_retry $EMAIL "$REJECT_TEMPLATE" force
                echo "r|`date`|$LINE" >> $LOG
                ;;

            d|D)
                confirm_or_retry
                echo "d|`date`|$LINE" >> $LOG
                ;;

            e|E)
                compose_email_or_retry $EMAIL "$EMAIL_TEMPLATE"
                NEXT="$NEXT\n$LINE"
                ;;
            
            u|U)
                read -p "New Username: " USERLOGIN
                echo "Updated username."
                continue
                ;;

            s|S)
                test -z "$FF" && confirm_or_retry
                NEXT="$NEXT\n$LINE"
                ;;

            q|Q)
                confirm_or_retry
                NEXT="$NEXT\n$LINE"
                FF=true
                ;;
            *)
                echo "Invalid choice: $ACTION"
                continue
                ;;
        esac
        
        SEEN="$IP|$SEEN"
        break
    done
done

echo -e "[0m"
echo -e "$NEXT" > $DATA
