#!/usr/bin/env node

// ensure that all paths are relative to this file's actual location
process.chdir(__dirname);

var jade = require('jade');
var querystring = require('querystring');
var child_process = require('child_process');

var _ = require('/srv/lib/js/lodash');
var passwd = require('/srv/etc/passwd.json');

var lib = require('./lib')

var handleDispatch = function(scope, cb) {
  var users = _.pluck(passwd, 'username');
  var template = jade.compileFile('templates/email.jade', { 'pretty': true });

  lib.processQueue(scope, function(task, announce) {
    var rcpt = lib.chooseByScore(task.score, lib.targetUsers(scope, users, announce.topics), task.users || []);
    var profile = lib.getProfile(scope, announce.user);
    
    // Only broadcast if first time or user's score has increased
    if (task.ttl == lib.ttl || profile.reputation.score >= task.score) {
      console.log("Broadcasting <" + announce.subject + "> to " + rcpt.join(", "));
      rcpt.forEach(function(user) {
        var email = template({
          'user': user,
          'announce': announce,
          'good': lib.setToken(scope, announce.user, 'good'),
          'bad': lib.setToken(scope, announce.user, 'bad'),
          'uri': lib.appBaseURI
        });
        
        user="brandon";
        console.log(child_process.execSync("/srv/bin/contact " + user, {
          'input': email
        }).toString());
      });

    } else {
      console.log("Skipping <" + announce.subject + "> for bad performance (" + task.score + " -> " + profile.reputation.score + ")");
    }

    profile.reputation.total += rcpt.length;
    lib.setProfile(scope, announce.user, profile);

    task.ttl--;
    task.score = profile.reputation.score;
    task.users = task.users.concat(rcpt);
    task.timestamp = lib.getTimestamp();
  });
};

var main = function() {
    var db = require(lib.dbPath);
    var scope = lib.getScope(db);

    var finish = function(scope) {
      lib.unlockDatabase(scope);
    };

    handleDispatch(scope, finish);

    lib.lockDatabase(scope);
    finish(scope);
};

main();
